#part 2
#question 1
#Brooke
SELECT product_code, product_name, list_price, discount_percent
FROM products
order by list_price DESC;

#question 2
#Anne
SELECT concat(last_name,', ',first_name) as full_name 
FROM customers
WHERE last_name >= 'M%'
ORDER BY last_name ASC;

#question 3
#Brooke
select product_name, list_price, date_added
from products
having list_price between 500 and 2000
order by date_added desc;

#question 4
#Brooke
select product_name, list_price,
	ROUND(list_price * (discount_percent/100),2) as discount_amount,
	ROUND(list_price - list_price * (discount_percent/100),2) as discount_price
from products
order by discount_price desc
limit 5;

#question 5
#Anne
SELECT item_id, item_price, discount_amount, quantity, 
	item_price * quantity as price_total,
    discount_amount * quantity as discount_total,
    ((item_price - discount_amount) * quantity) as item_total
FROM order_items
WHERE ((item_price - discount_amount) * quantity)  > 500
ORDER BY item_total DESC;

#question 6
#Brooke
select order_id, order_date, ship_date
from orders
where ship_date = NULL;

#question 7
#Anne
SELECT NOW() as today_unformatted,
	DATE_FORMAT ( NOW(),'%d-%b-%Y') as today_formatted;

#question 8
#Anne
SELECT 100 as price, 
	.07 as tax_rate, 
	(100 * .07) as tax_amount, 
	100 + (100 * .07) as total;

#part 3
#question 1
#Brooke
select c.category_name, p.product_name, p.list_price
from categories c, products p
order by c.category_name, p.product_name;

#question 2
#Pramosh
select first_name , last_name , line1 , city , state , zip_code
 from Addresses a, Customers c 
 where c.customer_id = a.customer_id and email_address = 'allan.sherwood@yahoo.com';

#question 3
#Brooke
select c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code 
from Customers c, Addresses a
where c.shipping_address_id = a.address_id;

#question 4
#Anne
SELECT c.last_name, c.first_name, o.order_date, p.product_name, oi.item_price, oi.discount_amount, oi.quantity
FROM customers c
JOIN orders o
On c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
JOIN products p
ON oi.product_id = p.product_id
ORDER BY last_name, order_date, product_name;

#question 5
#Brooke
select a.product_name, a.product_id, a.list_price
from Products a, products b
where a.product_id != b.product_id
and a.list_price = b.list_price
order by a.product_name;

#question 6
#Anne
SELECT category_name, product_id
FROM categories c
LEFT JOIN products p
ON c.category_id = p.category_id
WHERE product_id is NULL;

#question 7
#Anne
SELECT 'SHIPPED' as ship_status, order_id, order_date
FROM orders
WHERE ship_date is NOT NULL
UNION
SELECT 'NOT SHIPPED' , order_id, order_date
FROM orders
WHERE ship_date is NULL
ORDER BY order_date; 

#part 4
#question 1
#Pramosh
INSERT INTO Categories(category_name) VALUES('Brass');

#question 2
#Pramosh
UPDATE Categories SET category_name='Woodwinds' WHERE category_id=12;

#question 3
#Anne
DELETE FROM categories 
WHERE category_id = 5;

#question 4
#Anne
INSERT INTO products ( category_id, product_code, product_name, description, list_price, discount_percent, date_added)
VALUES (4, 'dgx_640', 'Yamaha DGX 640 88-Key Digital Piano', 'Long description to come.', 799.99, 0, current_timestamp());

#question 5
#Anne
UPDATE products
SET discount_percent = 35
WHERE product_id = 11;

#question 6
#Anne
DELETE FROM products WHERE category_id = 4;
DELETE FROM categories WHERE category_id = 4;

#question 7
#Pramosh
insert INTO Customers (email_address, password , first_name , last_name ) VALUES
 ('rick@raven.com' , '' , 'Rick' , 'Raven' );
 SELECT * FROM Customers ;

#question 8
#Brooke
update Customers
set password = 'secret'
where email_address = 'rick@raven.com';

#question 9
#Brooke
update Customers
set password = 'reset'
limit 100;

#part 5
#question 1
#Pramosh
SELECT COUNT(Order_ID) as Order_Count,
SUM(Tax_Amount) AS Tax_Total
FROM Orders;

#question 2
#Keven
SELECT category_name, COUNT(*) AS ProductCount,
MAX(list_price) AS MostExpensiveProductPrice
FROM categories c JOIN products p
ON c.category_id = p.category_id
GROUP BY category_name
ORDER BY ProductCount DESC

#question 3
#Pramosh
SELECT Email_Address, SUM(Item_Price * Quantity) AS ItemPriceTotal,
SUM(Discount_Amount * Quantity) AS DiscountAmountTotal
FROM Customers c
JOIN Orders o ON c.Customer_ID = o.Customer_ID
JOIN Order_Items oi ON o.Order_ID = oi.Order_ID
GROUP BY Email_Address
ORDER BY ItemPriceTotal DESC;

#question 4
#Keven
SELECT email_address, COUNT(o.order_id) AS OrderCount,
SUM((item_price - discount_amount) * quantity) AS OrderTotal
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY email_address
HAVING COUNT(o.order_id) > 1
ORDER BY OrderTotal DESC

#question 5
#Keven
SELECT email_address, COUNT(o.order_id) AS OrderCount,
SUM((item_price - discount_amount) * quantity) AS OrderTotal
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
WHERE item_price > 400
GROUP BY email_address
HAVING COUNT(o.order_id) > 1
ORDER BY OrderTotal DESC

#question 6
#Pramosh
SELECT Product_Name, SUM((Item_Price - Discount_Amount) * Quantity) AS ProductTotal
FROM Products p
JOIN Order_Items o ON p.Product_ID = o.Product_ID
GROUP BY Product_Name WITH ROLLUP;

#question 7
#Keven
SELECT email_address, COUNT(DISTINCT oi.product_id) AS numOfProducts
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY email_address
HAVING COUNT(DISTINCT oi.product_id) > 1
ORDER BY email_address

#question 8
#Keven
SELECT IF(GROUPING(category_name),'categoryName',category_name) AS replacementCategory,category_name,
 IF(GROUPING(product_name),'productName',product_name) AS replacementProduct,product_name,
 SUM(quantity) AS TotalQuantityPurchased
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN order_items oi ON  p.product_id = oi.product_id
GROUP BY category_name, product_name WITH ROLLUP

#question 9
#Pramosh
SELECT order_id, (item_price - discount_amount) * quantity AS item_amount,
    SUM((item_price - discount_amount) * quantity) AS order_amount 
FROM order_items
group by order_id
ORDER BY order_id;

#question 10
#Keven
SELECT order_id, (item_price - discount_amount) * quantity AS item_amount,
    SUM((item_price - discount_amount) * quantity) OVER(o_window ORDER BY (item_price - discount_amount) * quantity) AS order_amount, 
    ROUND(AVG((item_price - discount_amount) * quantity) OVER(o_window), 2) AS avg_order_amount
FROM order_items
WINDOW o_window AS (PARTITION BY order_id)
ORDER BY order_id;

#question 11
#Pramosh
SELECT customer_id, order_date, (item_price - discount_amount) * quantity AS item_total,
       SUM((item_price - discount_amount) * quantity) AS customer_total,
       SUM((item_price - discount_amount) * quantity) AS customer_total_by_date            
FROM orders JOIN order_items ON orders.order_id = order_items.order_id
group by customer_id
ORDER BY order_date;

#part 6
#question 1 
#Keven
SELECT  category_name
FROM categories c
WHERE category_id IN
(SELECT category_id FROM products p)
ORDER BY category_name;

#question 2
#Keven
SELECT product_name, list_price
FROM products
WHERE list_price>
(SELECT AVG(list_price)
FROM products
WHERE list_price > 0)
ORDER BY list_price DESC

#question 3
#Keven
SELECT category_name
FROM categories
WHERE NOT EXISTS 
(SELECT * FROM products WHERE categories.category_id =
products.category_id)

#question 4
#Keven
SELECT l.email_address, MAX(l.order_total) AS largest_order
FROM (SELECT c.email_address, o.order_id, ((oi.item_price-oi.discount_amount)*oi.quantity) AS order_total
FROM customers c JOIN orders o
ON c.customer_id =o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY c.email_address, o.order_id) AS l 
GROUP BY l.email_address //get error when trying to group by largest_order

#question 5 
#Keven
SELECT a.product_name, a.discount_percent
FROM products AS a
WHERE a.discount_percent NOT IN
(SELECT b.discount_percent FROM products AS b
WHERE a.product_name <> b.product_name)
ORDER BY product_name

#question 6 
#Keven
SELECT email_address, order_id, order_date
FROM customers AS a NATURAL JOIN orders
WHERE order_date = 
  (SELECT min(order_date)
  FROM orders as b
  where a.customer_id = b.customer_id)
ORDER BY order_date AND order_id
